#include <iostream>
#include <fstream>
#include <vector>

#include "sfm/ransac_homography.h"
#include "sfm/bundler_init_pair.h"

SFM_NAMESPACE_BEGIN
SFM_BUNDLER_NAMESPACE_BEGIN

namespace
{
    struct PairsComparator
    {
        PairsComparator (PairwiseMatching const& matching) : matching(&matching) {}
        PairwiseMatching const* matching;
        bool operator() (int const& a, int const& b)
        {
            return matching->at(a).matches.size() > matching->at(b).matches.size();
        }
    };
}  /* namespace */

void
InitialPair::compute (ViewportList const& viewports,
    PairwiseMatching const& matching, Result* result)
{
    result->view_1_id = -1;
    result->view_2_id = -1;

    /* Sort pairwise matching indices according to number of matches. */
    if (this->opts.verbose_output)
        std::cout << "Sorting pairwise matches..." << std::endl;

    std::vector<int> pairs(matching.size(), -1);
    for (std::size_t i = 0; i < pairs.size(); ++i)
        pairs[i] = i;
    PairsComparator cmp(matching);
    std::sort(pairs.begin(), pairs.end(), cmp);

    /* Prepare homography RANSAC. */
    if (this->opts.verbose_output)
        std::cout << "Searching for initial pair..." << std::endl;

    RansacHomography homography_ransac(this->opts.homography_opts);
    Correspondences correspondences;
    for (std::size_t i = 0; i < pairs.size(); ++i)
    {
        TwoViewMatching const& tvm = matching[pairs[i]];
        FeatureSet const& view1 = viewports[tvm.view_1_id].features;
        FeatureSet const& view2 = viewports[tvm.view_2_id].features;


//XXX



FeatureSet view_1_backup = view1;
FeatureSet view_2_backup = view2;



stringstream ss;
ss << tvm.view_1_id;
string str = ss.str();

if (str.size() < 2)
str = "0"+str;



	ifstream myfile;
	std::string filename = "/gcc/home/pschardt/achteckturm-test/views/view_00"+str+".rgn";

	char *file = (char*)filename.c_str();
	myfile.open (file, ios::in);
	if (myfile.is_open()) {
	char buf[50];
	myfile.getline(buf, 50);
	int id = atoi (buf);
	Quadrangle q1 = Quadrangle(id);
	for (int i=0; i<4; i++) {
	if (!myfile.eof())
  	{
    	    myfile.getline(buf, 50);
	    float x = atof (buf);
	    myfile.getline(buf, 50);
	    float y = atof (buf);
	    if (!(q1.isComplete())) {
	    q1.addPoint(x,y);
		if (q1.isComplete()) {
			view_1_backup.setQuad(1, q1);
		}
	    }
	}}


	myfile.getline(buf, 50);
	id = atoi (buf);
	Quadrangle q2 = Quadrangle(id);
	for (int i=0; i<4; i++) {
	if (!myfile.eof())
  	{
    	    myfile.getline(buf, 50);
	    float x = atof (buf);
	    myfile.getline(buf, 50);
	    float y = atof (buf);
	    if (!(q2.isComplete())) {
	    q2.addPoint(x,y);
		if (q2.isComplete()) {
			view_1_backup.setQuad(2, q2);
		}
	    }
	}}
	}


stringstream ss2;
ss2 << tvm.view_2_id;
str = ss2.str();

if (str.size() < 2)
str = "0"+str;

myfile.close();

	filename = "/gcc/home/pschardt/achteckturm-test/views/view_00"+str+".rgn";



	char *file2 = (char*)filename.c_str();
	myfile.open (file2, ios::in);
	if (myfile.is_open()) {

	char buf[50];
	myfile.getline(buf, 50);
	int id = atoi (buf);

	Quadrangle q1 = Quadrangle(id);
	for (int i=0; i<4; i++) {
	if (!myfile.eof())
  	{
    	    myfile.getline(buf, 50);
	    float x = atof (buf);
	    myfile.getline(buf, 50);
	    float y = atof (buf);
	    if (!(q1.isComplete())) {
	    q1.addPoint(x,y);
		if (q1.isComplete()) {
			view_2_backup.setQuad(1, q1);
		}
	    }
	}}


	myfile.getline(buf, 50);
	id = atoi (buf);
	Quadrangle q2 = Quadrangle(id);
	for (int i=0; i<4; i++) {
	if (!myfile.eof())
  	{
    	    myfile.getline(buf, 50);
	    float x = atof (buf);
	    myfile.getline(buf, 50);
	    float y = atof (buf);
	    if (!(q2.isComplete())) {
	    q2.addPoint(x,y);
		if (q2.isComplete()) {
			view_2_backup.setQuad(2, q2);
		}
	    }
	}}
	}

//XXX

//std::cout << "VIEW 1 " << view_1_backup.getQuad(1).getID() << "VIEW 2 " << view_2_backup.getQuad(1).getID() << std::endl;

if (view_1_backup.getQuad(1).getID()==view_2_backup.getQuad(1).getID()) {
//std::cout << "IN IF " << viewports[view_1_id].width << ", " << viewports[view_1_id].height << "Qkoord" << view_1_backup.q1.xCoords[1] << std::endl;
for (std::size_t i = 0; i < view_1_backup.positions.size(); ++i) {
   //std::cout << "IF Position: " << view_1_backup.positions[i][0] << " " << view_1_backup.positions[i][1] << std::endl;
   if ((!view_1_backup.q1.isInside(view_1_backup.positions[i][0], view_1_backup.positions[i][1],viewports[tvm.view_1_id].width, viewports[tvm.view_1_id].height))
&&(!view_1_backup.q2.isInside(view_1_backup.positions[i][0], view_1_backup.positions[i][1], viewports[tvm.view_1_id].width, viewports[tvm.view_1_id].height)))
{  //std::cout << view_1_backup.positions[i][0] << ", " << view_1_backup.positions[i][1] << "wird geloescht" << std::endl;
   view_1_backup.positions.erase(view_1_backup.positions.begin()+i);
}   if ((!view_2_backup.q1.isInside(view_2_backup.positions[i][0], view_2_backup.positions[i][1], viewports[tvm.view_2_id].width, viewports[tvm.view_2_id].height))
&&(!view_2_backup.q2.isInside(view_2_backup.positions[i][0], view_2_backup.positions[i][1], viewports[tvm.view_2_id].width, viewports[tvm.view_2_id].height)))
{   //std::cout << "FEATURE AUS 2 GELOESCHT" << std::endl;
    view_2_backup.positions.erase(view_2_backup.positions.begin()+i);}
}}

const_cast<const FeatureSet*> (&view_1_backup);
const_cast<const FeatureSet*> (&view_2_backup);





///XXX



        /* Prepare correspondences for RANSAC. */
        correspondences.resize(tvm.matches.size());
        for (std::size_t j = 0; j < tvm.matches.size(); ++j)
        {
            Correspondence& c = correspondences[j];
            math::Vec2f const& pos1 = view_1_backup.positions[tvm.matches[j].first];
            math::Vec2f const& pos2 = view_2_backup.positions[tvm.matches[j].second];
            std::copy(pos1.begin(), pos1.end(), c.p1);
            std::copy(pos2.begin(), pos2.end(), c.p2);
        }

        /* Run RANSAC. */
        RansacHomography::Result ransac_result;
        homography_ransac.estimate(correspondences, &ransac_result);

        /* Compute homography inliers percentage. */
        float const num_matches = tvm.matches.size();
        float const num_inliers = ransac_result.inliers.size();
        float const percentage = num_inliers / num_matches;

        if (this->opts.verbose_output)
        {
            std::cout << "  Pair "
                << "(" << tvm.view_1_id << "," << tvm.view_2_id << "): "
                << num_matches << " matches, "
                << num_inliers << " homography inliers ("
                << util::string::get_fixed(100.0f * percentage, 2)
                << "%)." << std::endl;
        }

        if (percentage < this->opts.max_homography_inliers)
        {
            result->view_1_id = tvm.view_1_id;
            result->view_2_id = tvm.view_2_id;
            break;
        }
    }

    /* Check if initial pair is valid. */
    if (result->view_1_id == -1 || result->view_2_id == -1)
        throw std::runtime_error("Initial pair failure");
}

SFM_BUNDLER_NAMESPACE_END
SFM_NAMESPACE_END

